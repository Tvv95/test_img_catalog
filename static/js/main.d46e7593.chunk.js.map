{"version":3,"sources":["Components/Images.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Images","props","dataImg","isGrouped","setTag","createId","path","type","substring","lastIndexOf","customizer","objValue","srcValue","isArray","groupedData","map","current","mergeWith","Object","entries","className","elem","src","alt","onClick","toString","cur","App","useState","tag","tagSubmitted","setTagSumb","setDataImg","isBtnActive","setBtnActive","setGrouped","isMsgShowed","setMsgState","isImgNotFound","setImgFoundStatus","error","setError","timerId","useRef","getRandomInt","min","max","nmb","Math","random","round","startDelayMode","randomNmb","length","result","alphabet","i","push","charAt","join","getRandomWord","useEffect","Promise","all","split","currentTag","fetch","then","response","currResponse","status","json","currentJson","data","image_url","urlImg","includes","undefined","catch","err","finally","onSubmit","evt","preventDefault","setInterval","autoFocus","onChange","target","value","replace","placeholder","disabled","clearTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d46e7593.chunk.js","sourcesContent":["import { mergeWith, isArray } from 'lodash';\r\n\r\nfunction Images(props: any) {\r\n    const dataImg = props.dataImg;\r\n    const isGrouped = props.isGrouped;\r\n    const setTag = props.setTag;\r\n\r\n    const createId = (path: string, type: string = '') => {\r\n        return type + path.substring(path.lastIndexOf('media/') + 6, path.lastIndexOf('/giphy'));\r\n    }\r\n\r\n    const customizer = (objValue: any, srcValue: any) => {\r\n        if (isArray(objValue)) {\r\n            if (isArray(objValue[0])) {\r\n                return [...objValue, srcValue];\r\n            }\r\n            return [objValue, srcValue];\r\n        }\r\n    }\r\n\r\n    if (isGrouped) {\r\n        const groupedData = {};\r\n        dataImg.map((current: any) => mergeWith(groupedData, current, customizer));\r\n        return Object.entries(groupedData).map((current: any) => {\r\n            return (<div className='card' key={'group_' + current[0]}><h5 className='card-title'>{current[0]}</h5>\r\n                {current[1].map((elem: any) => <div className='card insideCard' key={createId(elem.toString(), 'card_')}><img className='card-img img-fluid' src={elem} alt={current[0]} onClick={() => setTag(current[0])} /></div>)}</div>);\r\n        })\r\n    }\r\n    return dataImg.map((current: any) => Object.entries(current).map((elem: any) => {\r\n        return <div className='card mb-2' key={createId(elem[1][0], 'card_')}>\r\n            {elem[1].map((cur: any) => <img className='card-img img-fluid' key={createId(cur)} src={cur} alt={elem[0]} onClick={() => setTag(elem[0])} />)}\r\n        </div>\r\n    }))\r\n}\r\n\r\nexport default Images;","import React, { useState, useEffect, useRef } from 'react';\nimport Images from './Components/Images';\nimport './App.sass';\n\nfunction App() {\n  const [tag, setTag] = useState<string>('');\n  const [tagSubmitted, setTagSumb] = useState<string>('');\n  const [dataImg, setDataImg] = useState<Array<object>>([]);\n  const [isBtnActive, setBtnActive] = useState<boolean>(true);\n  const [isGrouped, setGrouped] = useState<boolean>(false);\n  const [isMsgShowed, setMsgState] = useState<boolean>(false);\n  const [isImgNotFound, setImgFoundStatus] = useState<boolean>(false);\n  const [error, setError] = useState<number | null>(null);\n  const timerId = useRef<any>();\n\n  const getRandomInt = (min: number, max: number): number => {\n    const nmb = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(nmb);\n  }\n\n  const getRandomWord = (length: number): string => {\n    const result = [];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < length; i++) {\n      result.push(alphabet.charAt(getRandomInt(1, alphabet.length)));\n    }\n    return result.join('');\n  }\n\n  const startDelayMode = (): void => {\n    const randomNmb = getRandomWord(getRandomInt(1, 10));\n    setTag(randomNmb);\n    setTagSumb(randomNmb);\n  }\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    if (tag === '') {\n      setMsgState(true);\n    } else if (tag === 'delay') {\n      startDelayMode();\n      timerId.current = setInterval(startDelayMode, 5000);\n    } else {\n      setTagSumb(tag);\n    }\n  }\n\n  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setTag(evt.target.value.replace(/^,|,{2,}|[^a-zA-Z,]/, ''));\n  }\n\n  const handleReset = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    setTag('');\n    clearTimeout(timerId.current);\n    setDataImg([]);\n  }\n\n  const fetchData = (): void => {\n    setBtnActive(false);\n    Promise.all(tagSubmitted.split(',').map(currentTag => fetch(`https://api.giphy.com/v1/gifs/random?api_key=MCinVvF5uqpmYQPkxunJqBPtgaVXfNJ8&tag=${currentTag}`)))\n      .then(response => Promise.all(response.map(currResponse => {\n        if (currResponse.status !== 200) {\n          throw currResponse.status;\n        }\n        return currResponse.json();\n      })))\n      .then(json => json.map(currentJson => currentJson.data.image_url))\n      .then(urlImg => {\n        if (urlImg.includes(undefined)) {\n          setImgFoundStatus(true);\n        } else {\n          setDataImg([...dataImg, { [tagSubmitted]: [...urlImg] }]);\n        }\n      })\n      .catch((err): void => setError(err))\n      .finally(() => setBtnActive(true));\n  }\n\n  useEffect(() => {\n    if (tagSubmitted !== '') {\n      fetchData();\n      setTagSumb('');\n    }\n  }, [tagSubmitted]);\n\n  useEffect(() => {\n    if (tag !== '') {\n      setMsgState(false);\n    }\n    if (isImgNotFound) {\n      setImgFoundStatus(false);\n    }\n  }, [tag])\n\n  return (\n    <div className=\"App\">\n      <form className='justify-content-center align-items-center' onSubmit={handleSubmit}>\n        <div className='alerts'>\n          {isMsgShowed ? <span className='alert alert-danger'>Заполните поле!</span> : null}\n          {isImgNotFound ? <span className='alert alert-danger'>По тегу ничего не найдено!</span> : null}\n          {error ? <span className='alert alert-danger'>Ошибка {error}!</span> : null}\n        </div>\n        <input type=\"text\" autoFocus onChange={handleInputChange} value={tag} placeholder='Введите тег' />\n        <button className='btn btn-success' type='submit' disabled={!isBtnActive}>{isBtnActive ? 'Загрузить' : 'Загрузка...'}</button>\n        <button className='btn btn-danger' type='reset' onClick={handleReset}>Очистить</button>\n        <button className='btn btn-info' type='button' onClick={() => setGrouped(!isGrouped)}>{isGrouped ? 'Разгруппировать' : 'Группировать'}</button>\n      </form>\n      <div className='container'>\n        <div className='card-deck'>\n          <Images dataImg={dataImg} isGrouped={isGrouped} setTag={setTag} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}