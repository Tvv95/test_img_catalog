[{"D:\\Git_Repos\\test_img_catalog\\src\\index.tsx":"1","D:\\Git_Repos\\test_img_catalog\\src\\App.tsx":"2","D:\\Git_Repos\\test_img_catalog\\src\\reportWebVitals.ts":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":5231,"mtime":1606742372431,"results":"6","hashOfConfig":"5"},{"size":425,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rhngcg",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Git_Repos\\test_img_catalog\\src\\index.tsx",[],"D:\\Git_Repos\\test_img_catalog\\src\\App.tsx",["15","16"],"import React, { useState, useEffect, useRef } from 'react';\nimport './App.sass';\nimport { uniqueId, mergeWith, isArray } from 'lodash';\n\nfunction App() {\n  const [tag, setTag] = useState<string>('');\n  const [tagSubmitted, setTagSumb] = useState<string>('');\n  const [dataImg, setDataImg] = useState<Array<object>>([]);\n  const [isBtnActive, setBtnActive] = useState<boolean>(true);\n  const [isGrouped, setGrouped] = useState<boolean>(false);\n  const [isMsgShowed, setMsgState] = useState<boolean>(false);\n  const [isImgNotFound, setImgFoundStatus] = useState<boolean>(false);\n  const [error, setError] = useState<number | null>(null);\n  const timerId = useRef<any>();\n\n  const getRandomInt = (min: number, max: number): number => {\n    const nmb = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(nmb);\n  }\n\n  const getRandomWord = (length: number): string => {\n    const result = [];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < length; i++) {\n      result.push(alphabet.charAt(getRandomInt(1, alphabet.length)));\n    }\n    return result.join('');\n  }\n\n  const startDelayMode = (): void => {\n    const randomNmb = getRandomWord(getRandomInt(1, 10));\n    setTag(randomNmb);\n    setTagSumb(randomNmb);\n  }\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    if (tag === '') {\n      setMsgState(true);\n    } else if (tag === 'delay') {\n      startDelayMode();\n      timerId.current = setInterval(startDelayMode, 5000);\n    } else {\n      setTagSumb(tag);\n    }\n  }\n\n  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setTag(evt.target.value.replace(/^,|,{2,}|[^a-zA-Z,]/, ''));\n  }\n\n  const handleReset = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    setTag('');\n    clearTimeout(timerId.current);\n    setDataImg([]);\n  }\n\n  const fetchData = (): void => {\n    setBtnActive(false);\n    Promise.all(tagSubmitted.split(',').map(currentTag => fetch(`https://api.giphy.com/v1/gifs/random?api_key=MCinVvF5uqpmYQPkxunJqBPtgaVXfNJ8&tag=${currentTag}`)))\n      .then(response => Promise.all(response.map(currResponse => {\n        if (currResponse.status !== 200) {\n          throw currResponse.status;\n        }\n        return currResponse.json();\n      })))\n      .then(json => json.map(currentJson => currentJson.data.image_url))\n      .then(urlImg => {\n        if (urlImg.includes(undefined)) {\n          setImgFoundStatus(true);\n        } else {\n          setDataImg([...dataImg, { [tagSubmitted]: [...urlImg] }]);\n        }\n      })\n      .catch((err): void => setError(err))\n      .finally(() => setBtnActive(true));\n  }\n\n  useEffect(() => {\n    if (tagSubmitted !== '') {\n      fetchData();\n      setTagSumb('');\n    }\n  }, [tagSubmitted]);\n\n  useEffect(() => {\n    if (tag !== '') {\n      setMsgState(false);\n    }\n    if (isImgNotFound) {\n      setImgFoundStatus(false);\n    }\n  }, [tag])\n\n  const customizer = (objValue: any, srcValue: any) => {\n    if (isArray(objValue)) {\n      if (isArray(objValue[0])) {\n        return [...objValue, srcValue];\n      }\n      return [objValue, srcValue];\n    }\n  }\n\n  function renderImgs() {\n    if (isGrouped) {\n      const groupedData = {};\n      dataImg.map(current => mergeWith(groupedData, current, customizer));\n      return Object.entries(groupedData).map((current: any) => {\n        return (<div className='card' key={uniqueId()}><h5 className='card-title'>{current[0]}</h5>\n          {current[1].map((elem: any) => <div className='card insideCard' key={uniqueId()}><img className='card-img img-fluid' key={uniqueId()} src={elem} alt={current[0]} onClick={() => setTag(current[0])} /></div>)}</div>);\n      })\n    }\n    return dataImg.map((current) => Object.entries(current).map((elem) => {\n      return <div className='card mb-2' key={uniqueId()}>\n        {elem[1].map((cur: any) => <img className='card-img img-fluid' key={uniqueId()} src={cur} alt={elem[0]} onClick={() => setTag(elem[0])} />)}\n      </div>\n    }))\n  }\n\n  return (\n    <div className=\"App\">\n      <form className='justify-content-center align-items-center' onSubmit={handleSubmit}>\n        <div className='alerts'>\n          {isMsgShowed ? <span className='alert alert-danger'>Заполните поле!</span> : null}\n          {isImgNotFound ? <span className='alert alert-danger'>По тегу ничего не найдено!</span> : null}\n          {error ? <span className='alert alert-danger'>Ошибка {error}!</span> : null}\n        </div>\n        <input type=\"text\" autoFocus onChange={handleInputChange} value={tag} placeholder='Введите тег' />\n        <button className='btn btn-success' type='submit' disabled={!isBtnActive}>{isBtnActive ? 'Загрузить' : 'Загрузка...'}</button>\n        <button className='btn btn-danger' type='reset' onClick={handleReset}>Очистить</button>\n        <button className='btn btn-info' type='button' onClick={() => setGrouped(!isGrouped)}>{isGrouped ? 'Разгруппировать' : 'Группировать'}</button>\n      </form>\n      <div className='container'>\n        <div className='card-deck'>\n          {renderImgs()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Git_Repos\\test_img_catalog\\src\\reportWebVitals.ts",[],{"ruleId":"17","severity":1,"message":"18","line":84,"column":6,"nodeType":"19","endLine":84,"endColumn":20,"suggestions":"20"},{"ruleId":"17","severity":1,"message":"21","line":93,"column":6,"nodeType":"19","endLine":93,"endColumn":11,"suggestions":"22"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["23"],"React Hook useEffect has a missing dependency: 'isImgNotFound'. Either include it or remove the dependency array.",["24"],{"desc":"25","fix":"26"},{"desc":"27","fix":"28"},"Update the dependencies array to be: [fetchData, tagSubmitted]",{"range":"29","text":"30"},"Update the dependencies array to be: [isImgNotFound, tag]",{"range":"31","text":"32"},[2752,2766],"[fetchData, tagSubmitted]",[2912,2917],"[isImgNotFound, tag]"]