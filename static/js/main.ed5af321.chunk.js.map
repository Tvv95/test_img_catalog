{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","tag","setTag","tagSubmitted","setTagSumb","dataImg","setDataImg","isBtnActive","setBtnActive","isGrouped","setGrouped","isMsgShowed","setMsgState","isImgNotFound","setImgFoundStatus","error","setError","timerId","useRef","getRandomInt","min","max","nmb","Math","random","round","startDelayMode","randomNmb","length","result","alphabet","i","push","charAt","join","getRandomWord","useEffect","Promise","all","split","map","currentTag","fetch","then","response","currResponse","status","json","currentJson","data","image_url","urlImg","includes","undefined","catch","err","finally","customizer","objValue","srcValue","isArray","className","onSubmit","evt","preventDefault","current","setInterval","type","autoFocus","onChange","target","value","replace","placeholder","disabled","onClick","clearTimeout","groupedData","mergeWith","Object","entries","elem","src","alt","uniqueId","cur","renderImgs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed5af321.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.sass';\nimport { uniqueId, mergeWith, isArray } from 'lodash';\n\nfunction App() {\n  const [tag, setTag] = useState<string>('');\n  const [tagSubmitted, setTagSumb] = useState<string>('');\n  const [dataImg, setDataImg] = useState<Array<object>>([]);\n  const [isBtnActive, setBtnActive] = useState<boolean>(true);\n  const [isGrouped, setGrouped] = useState<boolean>(false);\n  const [isMsgShowed, setMsgState] = useState<boolean>(false);\n  const [isImgNotFound, setImgFoundStatus] = useState<boolean>(false);\n  const [error, setError] = useState<number | null>(null);\n  const timerId = useRef<any>();\n\n  const getRandomInt = (min: number, max: number): number => {\n    const nmb = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(nmb);\n  }\n\n  const getRandomWord = (length: number): string => {\n    const result = [];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < length; i++) {\n      result.push(alphabet.charAt(getRandomInt(1, alphabet.length)));\n    }\n    return result.join('');\n  }\n\n  const startDelayMode = (): void => {\n    const randomNmb = getRandomWord(getRandomInt(1, 10));\n    setTag(randomNmb);\n    setTagSumb(randomNmb);\n  }\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    if (tag === '') {\n      setMsgState(true);\n    } else if (tag === 'delay') {\n      startDelayMode();\n      timerId.current = setInterval(startDelayMode, 5000);\n    } else {\n      setTagSumb(tag);\n    }\n  }\n\n  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setTag(evt.target.value.replace(/^,|,{2,}|[^a-zA-Z,]/, ''));\n  }\n\n  const handleReset = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    setTag('');\n    clearTimeout(timerId.current);\n    setDataImg([]);\n  }\n\n  const fetchData = (): void => {\n    setBtnActive(false);\n    Promise.all(tagSubmitted.split(',').map(currentTag => fetch(`https://api.giphy.com/v1/gifs/random?api_key=MCinVvF5uqpmYQPkxunJqBPtgaVXfNJ8&tag=${currentTag}`)))\n      .then(response => Promise.all(response.map(currResponse => {\n        if (currResponse.status !== 200) {\n          throw currResponse.status;\n        }\n        return currResponse.json();\n      })))\n      .then(json => json.map(currentJson => currentJson.data.image_url))\n      .then(urlImg => {\n        if (urlImg.includes(undefined)) {\n          setImgFoundStatus(true);\n        } else {\n          setDataImg([...dataImg, { [tagSubmitted]: [...urlImg] }]);\n        }\n      })\n      .catch((err): void => setError(err))\n      .finally(() => setBtnActive(true));\n  }\n\n  useEffect(() => {\n    if (tagSubmitted !== '') {\n      fetchData();\n      setTagSumb('');\n    }\n  }, [tagSubmitted]);\n\n  useEffect(() => {\n    if (tag !== '') {\n      setMsgState(false);\n    }\n    if (isImgNotFound) {\n      setImgFoundStatus(false);\n    }\n  }, [tag])\n\n  const customizer = (objValue: any, srcValue: any) => {\n    if (isArray(objValue)) {\n      if (isArray(objValue[0])) {\n        return [...objValue, srcValue];\n      }\n      return [objValue, srcValue];\n    }\n  }\n\n  function renderImgs() {\n    if (isGrouped) {\n      const groupedData = {};\n      dataImg.map(current => mergeWith(groupedData, current, customizer));\n      return Object.entries(groupedData).map((current: any) => {\n        return (<div className='card' key={uniqueId()}><h5 className='card-title'>{current[0]}</h5>\n          {current[1].map((elem: any) => <div className='card insideCard' key={uniqueId()}><img className='card-img img-fluid' key={uniqueId()} src={elem} alt={current[0]} onClick={() => setTag(current[0])} /></div>)}</div>);\n      })\n    }\n    return dataImg.map((current) => Object.entries(current).map((elem) => {\n      return <div className='card mb-2' key={uniqueId()}>\n        {elem[1].map((cur: any) => <img className='card-img img-fluid' key={uniqueId()} src={cur} alt={elem[0]} onClick={() => setTag(elem[0])} />)}\n      </div>\n    }))\n  }\n\n  return (\n    <div className=\"App\">\n      <form className='justify-content-center align-items-center' onSubmit={handleSubmit}>\n        <div className='alerts'>\n          {isMsgShowed ? <span className='alert alert-danger'>Заполните поле!</span> : null}\n          {isImgNotFound ? <span className='alert alert-danger'>По тегу ничего не найдено!</span> : null}\n          {error ? <span className='alert alert-danger'>Ошибка {error}!</span> : null}\n        </div>\n        <input type=\"text\" autoFocus onChange={handleInputChange} value={tag} placeholder='Введите тег' />\n        <button className='btn btn-success' type='submit' disabled={!isBtnActive}>{isBtnActive ? 'Загрузить' : 'Загрузка...'}</button>\n        <button className='btn btn-danger' type='reset' onClick={handleReset}>Очистить</button>\n        <button className='btn btn-info' type='button' onClick={() => setGrouped(!isGrouped)}>{isGrouped ? 'Разгруппировать' : 'Группировать'}</button>\n      </form>\n      <div className='container'>\n        <div className='card-deck'>\n          {renderImgs()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}